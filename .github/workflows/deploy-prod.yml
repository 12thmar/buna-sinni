name: Deploy frontend to S3 + CloudFront

on:
  push:
    branches: [ "prod" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-prod
      cancel-in-progress: true
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps (incl dev)
        run: npm ci

      - name: Install & Build
        env:
          VITE_CANON_HOST: ""  # keep empty unless you intentionally canonicalize
        run: |
          npm run build
          # Sanity: ensure hashed bundle referenced by index.html exists
          JS_FILE=$(grep -o 'assets/index-[^"]*\.js' dist/index.html | head -n1)
          CSS_FILE=$(grep -o 'assets/index-[^"]*\.css' dist/index.html | head -n1)
          test -f "dist/$JS_FILE" || (echo "Missing $JS_FILE" && exit 1)
          test -f "dist/$CSS_FILE" || (echo "Missing $CSS_FILE" && exit 1)
          echo "JS_FILE=$JS_FILE" >> $GITHUB_ENV
          echo "CSS_FILE=$CSS_FILE" >> $GITHUB_ENV
          echo "Bundle refs → $JS_FILE | $CSS_FILE"

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Compute S3 base (handles Origin Path/prefix)
        run: |
          S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          S3_PREFIX="${{ secrets.AWS_S3_PREFIX }}"   # e.g. "prod" or empty
          S3_BASE="s3://$S3_BUCKET"
          if [ -n "$S3_PREFIX" ]; then S3_BASE="$S3_BASE/$S3_PREFIX"; fi
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "S3_PREFIX=$S3_PREFIX" >> $GITHUB_ENV
          echo "S3_BASE=$S3_BASE" >> $GITHUB_ENV
          echo "Using S3_BASE=$S3_BASE"

      - name: Sync build → S3 (respects prefix)
        run: |
          aws s3 sync dist/ "$S3_BASE/" --delete

      - name: Compute S3 base (handles Origin Path/prefix)
        run: |
          S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          S3_PREFIX="${{ secrets.AWS_S3_PREFIX }}"   # e.g. "prod" if your origin path is /prod; else leave secret empty
          S3_BASE="s3://$S3_BUCKET"
          if [ -n "$S3_PREFIX" ]; then S3_BASE="$S3_BASE/$S3_PREFIX"; fi
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "S3_PREFIX=$S3_PREFIX" >> $GITHUB_ENV
          echo "S3_BASE=$S3_BASE" >> $GITHUB_ENV
          echo "Using S3_BASE=$S3_BASE"
      - name: Compute S3 base (handles Origin Path/prefix)
        run: |
          S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          S3_PREFIX="${{ secrets.AWS_S3_PREFIX }}"   # e.g. "prod" if your origin path is /prod; else leave secret empty
          S3_BASE="s3://$S3_BUCKET"
          if [ -n "$S3_PREFIX" ]; then S3_BASE="$S3_BASE/$S3_PREFIX"; fi
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "S3_PREFIX=$S3_PREFIX" >> $GITHUB_ENV
          echo "S3_BASE=$S3_BASE" >> $GITHUB_ENV
          echo "Using S3_BASE=$S3_BASE"

      - name: Fix MIME types + cache headers (no blanket REPLACE)
        shell: bash
        run: |
          set -euo pipefail
          # Per-extension content-types (set BOTH cache-control and content-type in one shot)
          declare -A MAP=(
            ["js"]="application/javascript"
            ["mjs"]="application/javascript"
            ["cjs"]="application/javascript"
            ["css"]="text/css"
            ["svg"]="image/svg+xml"
            ["png"]="image/png"
            ["jpg"]="image/jpeg"
            ["jpeg"]="image/jpeg"
            ["webp"]="image/webp"
            ["avif"]="image/avif"
            ["woff2"]="font/woff2"
            ["map"]="application/json"
            ["json"]="application/json"
          )
          for ext in "${!MAP[@]}"; do
            aws s3 cp "$S3_BASE/assets/" "$S3_BASE/assets/" \
              --recursive --exclude "*" --include "*.${ext}" \
              --metadata-directive REPLACE \
              --content-type "${MAP[$ext]}" \
              --cache-control "public,max-age=31536000,immutable"
          done

          # HTML should be no-cache so new builds take effect
          aws s3 cp "$S3_BASE/index.html" "$S3_BASE/index.html" \
            --metadata-directive REPLACE \
            --content-type "text/html" \
            --cache-control "no-cache"

      - name: Verify bundle Content-Type (S3)
        run: |
          JS="$JS_FILE"; CSS="$CSS_FILE"
          if [ -n "$S3_PREFIX" ]; then JS="$S3_PREFIX/$JS"; CSS="$S3_PREFIX/$CSS"; fi
          aws s3api head-object --bucket "$S3_BUCKET" --key "$JS" \
            --query '{Key:Key,CT:ContentType,Cache:CacheControl}'
          aws s3api head-object --bucket "$S3_BUCKET" --key "$CSS" \
            --query '{Key:Key,CT:ContentType,Cache:CacheControl}'
