name: Deploy frontend to S3 + CloudFront

on:
  push:
    branches: [ "prod" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-prod
      cancel-in-progress: true
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps (incl dev)
        run: npm ci --include=dev

      - name: Build
        env:
          # Ensure vite.config.js has: base: "/"
          VITE_CANON_HOST: ""  # leave blank unless you intentionally canonicalize to bunaroots.com
        run: npm run build

      - name: Sanity check (bundle must NOT reference cloudfront.net)
        run: |
          if grep -Riq "cloudfront\.net" dist; then
            echo "ERROR: Built bundle contains CloudFront hostname. Remove any redirect/canonical code."
            grep -Rin "cloudfront\.net" dist || true
            exit 1
          fi
          
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Flip `if: ${{ false }}` to true ONCE if you want to nuke the bucket and start fresh.
      - name: (One-time) Hard clean bucket
        if: ${{ false }}
        run: aws s3 rm s3://${{ secrets.AWS_S3_BUCKET }}/ --recursive

      # Phase 1: upload everything with correct MIME types by extension
      - name: Upload all artifacts (preserve types) + delete old
        run: |
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }}/ --delete

      # Phase 2: set correct cache policies
      - name: Set long cache for hashed assets
        run: |

          aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/assets/ s3://${{ secrets.AWS_S3_BUCKET }}/assets/ \
            --recursive \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable"

      - name: Ensure index.html is no-store
        run: |
          aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/index.html s3://${{ secrets.AWS_S3_BUCKET }}/index.html \
            --metadata-directive REPLACE \
            --cache-control "no-store, no-cache, max-age=0, must-revalidate" \
            --content-type "text/html; charset=utf-8"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"